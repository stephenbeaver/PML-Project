#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
NA_vars <- colSums((is.na(trainingPart)))==0
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
dim(trainingPart)
dim(testingPart)
View(trainingPart)
View(trainingPart)
mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
dim(trainingPart
)
dim(trainingPart[1])
nrow(trainingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
NA_vars <- colSums((is.na(trainingPart))) < (0.95*(nrow(trainingPart)))
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
NA_vars <- colSums((is.na(trainingPart))) > (0.95*(nrow(trainingPart)))
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
NA_vars <- colSums((is.na(trainingPart))) < (0.95*(nrow(trainingPart)))
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
NA_vars <- colSums((is.na(trainingPart))) < (0.5*(nrow(trainingPart)))
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
NA_vars <- colSums((is.na(trainingPart))) < (0.1*(nrow(trainingPart)))
trainingPart <- trainingPart[,-NA_vars]
testingPart <- testingPart[, -NA_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
#NA_vars <- colSums((is.na(trainingPart))) < (0.1*(nrow(trainingPart)))
#trainingPart <- trainingPart[,-NA_vars]
#testingPart <- testingPart[, -NA_vars]
x <- 0.95*(nrow(trainingPart))
trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
x
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
#NA_vars <- colSums((is.na(trainingPart))) < (0.1*(nrow(trainingPart)))
#trainingPart <- trainingPart[,-NA_vars]
#testingPart <- testingPart[, -NA_vars]
x <- 0.05*(nrow(trainingPart))
trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Remove Variables with all NAs
#NA_vars <- colSums((is.na(trainingPart)))==0
#NA_vars <- colSums((is.na(trainingPart))) < (0.1*(nrow(trainingPart)))
#trainingPart <- trainingPart[,-NA_vars]
#testingPart <- testingPart[, -NA_vars]
x <- 0.05*(nrow(trainingPart))
trainingPart <- trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart <- testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
#mod2 <- rpart(classe ~ . , data=trainingPart, method = 'class')
fancyRpartPlot(mod1$finalModel)
summary(trainingPart$classe)
mod2 <- rpart(classe ~ . , data=trainingPart, method = 'class')
fancyRpartPlot(mod2$finalModel)
fancyRpartPlot(mod2)
predmod2 <- predict(mod2, testingPart)
confmatrix <- confusionMatrix(predmod2, testingPart$classe)
predmod2 <- predict(mod2, testingPart, type = 'class')
confmatrix <- confusionMatrix(predmod2, testingPart$classe)
confmatrix
View(testingPart)
View(testing)
View(testing)
predVal <- predict(mod2, testing, type = 'class')
predVal
testing <- testing[,-NZV_vars]
y <- 0.05*(nrow(testing))
testing <- testing %>% select_if(~sum(!is.na(.)) > y )
predVal <- predict(mod2, testing, type = 'class')
predVal
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#How many rows is 5% of the TrainingPart?
x <- 0.05*(nrow(trainingPart))
#Remove Variables with mostly NAs
trainingPart <- trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart <- testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
#fancyRpartPlot(mod1$finalModel)
mod2 <- rpart(classe ~ . , data=trainingPart, method = 'class')
fancyRpartPlot(mod2)
predmod2 <- predict(mod2, testingPart, type = 'class')
confmatrix <- confusionMatrix(predmod2, testingPart$classe)
confmatrix
testing <- testing[,-NZV_vars]
y <- 0.05*(nrow(testing))
testing <- testing %>% select_if(~sum(!is.na(.)) > y )
predVal <- predict(mod2, testing, type = 'class')
predVal
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#How many rows is 5% of the TrainingPart?
x <- 0.05*(nrow(trainingPart))
#Remove Variables with mostly NAs
trainingPart <- trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart <- testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Remove First 5 Variables X and Uuser Name and Time Stamps
trainingPart <- trainingPart[, -(1:5)]
testingPart <- testingPart[, -(1:5)]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
#fancyRpartPlot(mod1$finalModel)
mod2 <- rpart(classe ~ . , data=trainingPart, method = 'class')
fancyRpartPlot(mod2)
predmod2 <- predict(mod2, testingPart, type = 'class')
confmatrix <- confusionMatrix(predmod2, testingPart$classe)
confmatrix
#Packages
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(dplyr)
set.seed(73)
#Set Working Dir
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
#Data
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
#Create Data Partition
inTrain <- createDataPartition(y = training$classe, p = 0.7, list = F)
trainingPart <- training[inTrain,]
testingPart <- training[-inTrain,]
dim(trainingPart)
dim(testingPart)
str(trainingPart$classe)
summary(trainingPart$classe)
#Remove Near Zero Variance Variables
NZV_vars <- nearZeroVar(trainingPart)
trainingPart <- trainingPart[,-NZV_vars]
testingPart <- testingPart[, -NZV_vars]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#How many rows is 5% of the TrainingPart?
x <- 0.05*(nrow(trainingPart))
#Remove Variables with mostly NAs
trainingPart <- trainingPart %>% select_if(~sum(!is.na(.)) > x )
testingPart <- testingPart %>% select_if(~sum(!is.na(.)) > x )
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#Remove First 5 Variables X and Uuser Name and Time Stamps
trainingPart <- trainingPart[, -(1:5)]
testingPart <- testingPart[, -(1:5)]
#Check New dimensions
dim(trainingPart)
dim(testingPart)
#mod1 <- train(classe ~ . , method = 'rpart', data = trainingPart)
#fancyRpartPlot(mod1$finalModel)
mod2 <- rpart(classe ~ . , data=trainingPart, method = 'class')
fancyRpartPlot(mod2)
predmod2 <- predict(mod2, testingPart, type = 'class')
confmatrix <- confusionMatrix(predmod2, testingPart$classe)
confmatrix
trcont <- trainControl(method = 'cv', number = 5)
mod1 <- train(classe ~ . , data = trainingPart, method = 'rpart', trControl = trcont)
fancyRpartPlot(mod1$finalModel)
predmod1 <- predict(mod1, testingPart, type = 'class')
confmatrix1 <- confusionMatrix(predmod2, testingPart$classe)
confmatrix1
mod3 <- traing(classe ~ . , data=trainingPart, method = 'rf', trControl = trcont)
mod3 <- train(classe ~ . , data=trainingPart, method = 'rf', trControl = trcont)
mod3 <- train(classe ~ . , data=trainingPart, method = 'rf', trControl = trcont,
allowParallel = TRUE)
mod3 <- train(classe ~ . , data=trainingPart, method = 'rf', trControl = trcont,
allowParallel = TRUE)
trcont <- trainControl(method = 'cv', number = 5, allowParallel = TRUE)
mod3 <- train(classe ~ . , data=trainingPart, method = 'rf', trControl = trcont)
predmod3 <- predict(mod3, testingPart, type = 'class')
predmod3 <- predict(mod3, testingPart, type = 'prob')
confmatrix3 <- confusionMatrix(predmod3, testingPart$classe)
confmatrix3
confmatrix3 <- confusionMatrix(predmod3, testingPart$classe)
predmod3 <- predict(mod3, newdata = testingPart, type = 'prob')
confmatrix3 <- confusionMatrix(predmod3, testingPart$classe)
predmod3 <- predict(mod3, newdata = testingPart)
confmatrix3 <- confusionMatrix(predmod3, testingPart$classe)
confmatrix3
testing <- testing[,-NZV_vars]
y <- 0.05*(nrow(testing))
testing <- testing %>% select_if(~sum(!is.na(.)) > y )
testing <- testing[, -(1:5)]
predVal <- predict(mod3, testing, type = 'class')
testing <- testing[,-NZV_vars]
y <- 0.05*(nrow(testing))
testing <- testing %>% select_if(~sum(!is.na(.)) > y )
testing <- testing[, -(1:5)]
predVal <- predict(mod3, testing)
View(testing)
View(testing)
testing <- read.csv('pml-testing.csv')
setwd("~/Coursera/Data Science Specialization/Practical Machine Learning/Project")
testing <- read.csv('pml-testing.csv')
predVal <- predict(mod3, testing)
predVal
